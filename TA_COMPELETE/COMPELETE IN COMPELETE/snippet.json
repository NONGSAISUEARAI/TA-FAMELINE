{
	"defun ": {
		"prefix": "defun",
		"body": [
			"(defun ${1:foo} ()",
			"\t$2",
			")"
		],
		"description": "define a lisp function"
	},
	"(defun ": {
		"prefix": "(defun",
		"body": [
			"(defun ${1:foo} ()",
			"\t${2:}\r"
		],
		"description": "define a lisp function"
	},
	"defun c": {
		"prefix": "defun c:",
		"body": [
			"(defun c:${1:foo} ()",
			"\t$2",
			")"
		],
		"description": "define a lisp function as AutoCAD command"
	},
	"(defun c": {
		"prefix": "(defun c:",
		"body": [
			"(defun c:${1:foo} ()",
			"\t${2:}\r"
		],
		"description": "define a lisp function as AutoCAD command"
	},
	"getvar": {
		"prefix": "getvar",
		"body": [
			"(getvar \"${1:sysvar}\")"
		],
		"description": "Retrieves the value of an AutoCAD system variable"
	},
	"princ": {
		"prefix": "princ",
		"body": [
			"(princ \"${1:str}\")"
		],
		"description": "Prints an expression to the command line, or writes an expression to an open file"
	},
	"print": {
		"prefix": "print",
		"body": [
			"(print \"${1:str}\")"
		],
		"description": "Prints an expression to the command line, or writes an expression to an open file"
	},
	"prin1": {
		"prefix": "prin1",
		"body": [
			"(prin1 ${1:str})"
		],
		"description": "Prints an expression to the command line, or writes an expression to an open file"
	},
	"polar": {
		"prefix": "polar",
		"body": [
			"(polar '(${1:pt}) ${2:ang} ${3:dist})"
		],
		"description": "Returns the UCS 3D point at a specified angle and distance from a point"
	},
	"prompt": {
		"prefix": "prompt",
		"body": [
			"(prompt \"${1:msg}\")"
		],
		"description": "Displays a string on your screen's prompt area"
	},
	"setq": {
		"prefix": "setq",
		"body": [
			"(setq ${1:sym} ${2:expr})"
		],
		"description": "Sets the value of a symbol or symbols to associated expressions"
	},
	"setvar": {
		"prefix": "setvar",
		"body": [
			"(setvar \"${1:varname}\" ${2:value})"
		],
		"description": "Sets an AutoCAD system variable to a specified value"
	},
	"strcat": {
		"prefix": "strcat",
		"body": [
			"(strcat \"${1:str1}\" \"${2:str2}\")"
		],
		"description": "Returns a string that is the concatenation of multiple strings"
	},
	"ssget": {
		"prefix": "ssget",
		"body": [
			"(ssget \"_${1:method}\" '((${2:list1}) (${3:list2}))"
		],
		"description": "Creates a selection set from the selected object"
	},
	"substr": {
		"prefix": "substr",
		"body": [
			"(substr \"${1:str}\" ${2:start} ${3:len})"
		],
		"description": "Returns a substring of a string"
	},
	"if": {
		"prefix": "if",
		"body": [
			"(if (${1:testexpr})",
			"\t(${2:thenexpr})",
			"\t(${3:elseexpr})",
			")"
		],
		"description": "if expression"
	},
	"ifprogn": {
		"prefix": "ifp",
		"body": [
			"(if (${1:testexpr})",
			"\t(progn",
			"\t\t(${2:thenexpr})",
			"\t)",
			")"
		],
		"description": "if progn expression"
	},
	"itoa": {
		"prefix": "itoa",
		"body": [
			"(itoa ${1:int})"
		],
		"description": "Returns the conversion of an integer into a string"
	},
	"inters": {
		"prefix": "inters",
		"body": [
			"(inters ${1:pt1} ${2:pt2} ${3:pt3} ${4:pt4} ${5:[onseg]})"
		],
		"description": "intersect command expression"
	},
	"tblsearch style": {
		"prefix": "tblsearch",
		"body": [
			"(tblsearch \"${1:table-name}\" \"${2:symbol}\")"
		],
		"description": "Searches a symbol table for a symbol name"
	},
	"line": {
		"prefix": "line",
		"body": [
			"(command \"_line\" \"${1:pt1}\" \"${2:pt2}\" \"\")"
		],
		"description": "line command expression"
	},
	"arc": {
		"prefix": "arc",
		"body": [
			"(command \"_arc\" \"${1:pt1}\" \"${2:pt2}\" \"${3:pt3}\")"
		],
		"description": "arc command expression"
	},
	"circle": {
		"prefix": "circle",
		"body": [
			"(command \"_circle\" \"${1:center}\" ${2:radius})"
		],
		"description": "circle command expression"
	},
	"pline": {
		"prefix": "pline",
		"body": [
			"(command \"_pline\" \"${1:pt1}\" \"${2:pt2}\" \"\")"
		],
		"description": "pline command expression"
	},
	"abs": {
		"prefix": "abs",
		"body": [
			"(abs ${1:number})"
		],
		"description": "Returns the absolute value of a number"
	},
	"alert": {
		"prefix": "alert",
		"body": [
			"(alert \"${1:msg}\")"
		],
		"description": "Displays a dialog box containing an error or warning message"
	},
	"alloc": {
		"prefix": "alloc",
		"body": [
			"(alloc ${1:n-alloc})"
		],
		"description": "Sets the size of the segment to be used by the expand function"
	},
	"angle": {
		"prefix": "angle",
		"body": [
			"(angle '(${1:pt1}) '(${2:pt2}))"
		],
		"description": "Returns an angle in radians of a line defined by two endpoints"
	},
	"apply": {
		"prefix": "apply",
		"body": [
			"(apply '${1:foo} '(${2:list}))"
		],
		"description": "Passes a list of arguments to, and executes, a specified function"
	},
	"append": {
		"prefix": "append",
		"body": [
			"(append '(${1:pt1}) '(${2:pt2}))"
		],
		"description": "Takes any number of lists and appends them together as one list"
	},
	"ascii": {
		"prefix": "ascii",
		"body": [
			"(ascii \"${1:str}\")"
		],
		"description": "Returns the conversion of the first character of a string into its Unicode character code (an integer)"
	},
	"assoc": {
		"prefix": "assoc",
		"body": [
			"(assoc '${1:element} ${2:alist})"
		],
		"description": "Searches an association list for an element and returns that association list entry"
	},
	"atan": {
		"prefix": "atan",
		"body": [
			"(atan '${1:num1} ${2:[num2]})"
		],
		"description": "Returns the arctangent of a number in radians"
	},
	"atof": {
		"prefix": "atof",
		"body": [
			"(atof \"${1:str}\")"
		],
		"description": "Converts a string into a real number"
	},
	"atoi": {
		"prefix": "atoi",
		"body": [
			"(atoi \"${1:str}\")"
		],
		"description": "Converts a string into an integer"
	},
	"atoms-family": {
		"prefix": "atomsfamily",
		"body": [
			"(atoms-family ${1:format} ${2:[symlist]})"
		],
		"description": "Returns a list of the currently defined symbols"
	},
	"boundp": {
		"prefix": "boundp",
		"body": [
			"(boundp ${1:sym})"
		],
		"description": "Verifies if a value is bound to a symbol"
	},
	"car": {
		"prefix": "car",
		"body": [
			"(car '(${1:pt1} ${2:pt2} ${3:pt3}))"
		],
		"description": "Returns the first element of a list"
	},
	"caddr": {
		"prefix": "caddr",
		"body": [
			"(caddr '(${1:pt1} ${2:pt2} ${3:pt3}))"
		],
		"description": "Verifies if a value is bound to a symbol"
	},
	"condd": {
		"prefix": "condd",
		"body": [
			"(cond",
			"  (;${1:}_case_1",
			"     (and",
			"        ()",
			"        ()",
			"     )",
			"     (progn",
			"       ()",
			"       (princ \"${1:}_case_1\")",
			"     )",
			"  )",
			"  (;${1:}_case_2",
			"     (and",
			"        ()",
			"        ()",
			"     )",
			"     (progn",
			"       ()",
			"       (princ \"${1:}_case_2\")",
			"     )",
			"  )",
			"  (;${1:}_case_3",
			"     (and",
			"        ()",
			"        ()",
			"     )",
			"     (progn",
			"       ()",
			"       (princ \"${1:}_case_3\")",
			"     )",
			"  )",
			"  (;${1:}_case_4",
			"     (and",
			"        ()",
			"        ()",
			"     )",
			"     (progn",
			"       ()",
			"       (princ \"${1:}_case_4\")",
			"     )",
			"  )",
			")",
			""
		],
		"description": "A while loop template with sslength and increment"
	},
	"cons": {
		"prefix": "cons",
		"body": [
			"(cons '${1:element} '(${2:atom}))"
		],
		"description": "Adds an element to the beginning of a list, or constructs a dotted list"
	},
	"chr": {
		"prefix": "chr",
		"body": [
			"(chr ${1:int})"
		],
		"description": "Converts an integer representing an Unicode character code into a single-character string"
	},
	"open": {
		"prefix": "open",
		"body": [
			"(setq ${1:fp} \"${2:fname.txt}\")",
			"(setq ${3:f} (open ${1:fp} \"${5:mode}\"))",
			"${6: }",
			"(close ${3:f})"
		],
		"description": "Closes an open file"
	},
	"entmake": {
		"prefix": "entmake",
		"body": [
			"(entmake ${1:[elist]})"
		],
		"description": "Creates a new entity in the drawing"
	},
	"entmod": {
		"prefix": "entmod",
		"body": [
			"(entmod ${1:elist})"
		],
		"description": "Modifies the definition data of an object (entity)"
	},
	"entsel:TA": {
		"prefix": "entsel",
		"body": [
			"(setq ${1:}_ename_ (car (entsel \"specify Object\")))",
			"(setq ${1:}_obj_ (vlax-ename->vla-object ${1:}_ename_))",
			"${2:}"
		],
		"description": "Removes the specified characters from the beginning of a string"
	},
	"eq": {
		"prefix": "eq",
		"body": [
			"(setq ${1:f1} '(${2:expr1} ${3:expr2} ${4:expr3}))",
			"(setq ${8:f2} '(${5:expr4} ${6:expr5} ${7:expr6}))",
			"(eq ${1:f1} ${8:f2})"
		],
		"description": "Determines whether two expressions are identical"
	},
	"equal": {
		"prefix": "equal",
		"body": [
			"(equal ${1:expr1} ${2:expr2} ${3:[fuzz]})"
		],
		"description": "Determines whether two expressions are equal"
	},
	"expt": {
		"prefix": "expt",
		"body": [
			"(expt ${1:number} ${2:power})"
		],
		"description": "Returns a number raised to a specified power"
	},
	"while": {
		"prefix": "while",
		"body": [
			"(while ${1:testexpr} ${2:[expr ...]})"
		],
		"description": "Evaluates a test expression, and if it is not nil, evaluates other expressions; repeats this process until the test expression evaluates to nil"
	},
	"while_list_:TA": {
		"prefix": "(whilelist)",
		"body": [
			";preloop_and_while",
			"  (setq ${1:}i 0)",
			"  (while (< ${1:}i (length ${1:}))",
			"    (setq ${1:}ename_ (nth  ${1:}i ${1:}))",
			"",
			"    (setq ${1:}i (+ ${1:}i 1))",
			"  )$0"";"
		],
		"description": "A while loop template with sslength and increment"
	},
	"while_select_block_": {
		"prefix": "(whileselect)",
		"body": [
			";while_select_block_on_condition_",
			"\t\t(setq ${1:}_ nil)",
			"\t\t(while (= ${1:}_ nil)",
			"\t\t\t(setq ${1:}_ (car (entsel \"specify ${1:} Object\")))",
			"\t\t\t(if", 
			"\t\t\t\t(and ;conditional_rule_for_select_object",_
			"\t\t\t\t\t(/= ${1:}_ nil)",
			"\t\t\t\t\t(setq ${1:}_obj_ (vlax-ename->vla-object ${1:}_))",
			"\t\t\t\t\t(= (vla-get-objectname ${1:}_obj_ ) \"AcDbBlockReference\")",
			"\t\t\t\t\t(= (vla-get-isdynamicblock ${1:}_obj_ ) :vlax-true)",
			"\t\t\t\t\t(/= (LM:getdynpropallowedvalues ${1:}_obj_ \"view\") nil)",
			"\t\t\t\t)",
			"\t\t\t\t(progn",
			"\t\t\t\t\t(setq ${1:}_list_ (LM:getdynpropallowedvalues ${1:}_obj_ \"view\") )",
			"\t\t\t\t)",
			"\t\t\t\t(alert \"Object invalid Please try again\")",
			"\t\t\t)",
			"\t\t)",
			";"
		],
		"description": "A while loop template with selection by base on condition rule"
	},
	"while_ssget_:TA": {
		"prefix": "(whiless)",
		"body": [
			";preloop_and_while",
			"  (setq ${1:}i 0)",
			"  (while (< ${1:}i (sslength ${1:}))",
			"    (setq ${1:}ename_ (ssname ${1:} ${1:}i))",
			"",
			"    (setq ${1:}i (+ ${1:}i 1))",
			"  )$0",
			";"
		],
		"description": "A while loop template with sslength and increment"
	},
	"write-line": {
		"prefix": "writeline",
		"body": [
			"(setq ${1:f} (open \"${2:fp}\" \"${3:mode}\"))",
			"(write-line \"${4:str}\" \"${1:f}\")"
		],
		"description": "Writes a string to the screen or to an open file"
	},
	"foreach": {
		"prefix": "foreach",
		"body": [
			"(foreach ${1:item} '(${2:lst}))"
		],
		"description": "Evaluates expressions for all members of a list"
	},
	"repeat": {
		"prefix": "repeat",
		"body": [
			"(repeat ${1:num} (${2:foo1}) (${3:foo2}))"
		],
		"description": "Evaluates each expression a specified number of times, and returns the value of the last expression"
	},
	"read-line": {
		"prefix": "readline",
		"body": [
			"(setq ${1:f} (open \"${2:fp}\" \"${3:mode}\"))",
			"(read-line \"${1:f}\")"
		],
		"description": "Reads a string from the keyboard or from an open file, until an end-of-line marker is encountered"
	},
	"reverse": {
		"prefix": "reverse",
		"body": [
			"(reverse '(${1:lst}))"
		],
		"description": "Returns a copy of a list with its elements reversed"
	},
	"distance": {
		"prefix": "distance",
		"body": [
			"(distance '(${1:pt1}) '(${2:pt2}))"
		],
		"description": "distance command expression"
	},
	"nth": {
		"prefix": "nth",
		"body": [
			"(nth ${1:n} '(${2:lst}))"
		],
		"description": "Returns the nth element of a list"
	},
	"DEVNOTE:TA": {
		"prefix": "DEVNOTE",
		"body": [
			";Note By Code_Developer",
			";This command is designed to work exclusively with a block named 'LV_DATA_FROM_EXCEl'.",
			";The operation of the command will read the block's attribute values and generate a set of text.",
			";Fully command must have sub-functions with names starting with TA: or LM:",
			";${1:}",
			";"
		],
		"description": "Returns the nth element of a list"
	},
	"command pselect": {
		"prefix": "pse",
		"body": [
			"(command \"pselect\"  ${1:} \"\" )"
		],
		"description": "Returns the nth element of a list"
	},
	"putcolor:TA": {
		"prefix": "pcolor",
		"body": [
			"(setq ${1:}_obj_put_color (vla-put-color ${1:}_obj_ 0)) ;0 = bylock, 256 = bylayer",
			""
		],
		"description": "Returns the nth element of a list"
	},
	"putlayer:TA": {
		"prefix": "player",
		"body": [
			"(setq ${1:}_obj_put_layer (vla-put-layer ${1:}_obj_ \"0\")) ;by_string_name_layer",
			" "
		],
		"description": "Returns the nth element of a list"
	},
	"putlinetype:TA": {
		"prefix": "plinetype",
		"body": [
			"(setq ${1:}_obj_put_linetype (vla-put-linetype ${1:}_obj_ \"byblock\")) ;by_string_name_linetype",
			""
		],
		"description": "Returns the nth element of a list"
	},
//////////////////////////////////////////////////////////////////////
	"get_color_layer_linetype_:TA": {
		"prefix": "get3mode",
		"body": [
			"(setq ${1:}_obj_get_color (vla-get-color ${1:}_obj_ 0)) ;0 = bylock, 256 = bylayer",
			"(setq ${1:}_obj_get_layer (vla-get-layer ${1:}_obj_ \"0\")) ;by_string_name_layer",
			"(setq ${1:}_obj_get_linetype (vla-get-linetype ${1:}_obj_ \"byblock\")) ;by_string_name_linetype",
			""
		],
		"description": "Returns the nth element of a list"
	},
	"getcolor:TA": {
		"prefix": "gcolor",
		"body": [
			"(setq ${1:}_obj_get_color (vla-get-color ${1:}_obj_ 0)) ;0 = bylock, 256 = bylayer",
			""
		],
		"description": "Returns the nth element of a list"
	},
	"getlayer:TA": {
		"prefix": "glayer",
		"body": [
			"(setq ${1:}_obj_get_layer (vla-get-layer ${1:}_obj_ \"0\")) ;by_string_name_layer",
			" "
		],
		"description": "Returns the nth element of a list"
	},
	"getlinetype:TA": {
		"prefix": "glinetype",
		"body": [
			"(setq ${1:}_obj_get_linetype (vla-get-linetype ${1:}_obj_ \"byblock\")) ;by_string_name_linetype",
			""
		],
		"description": "Returns the nth element of a list"
	},
	"getboundingbox:TA": {
		"prefix": "gboundingbox",
		"body": [
			"(setq ${1:}_obj_getboundingbox (vla-getboundingbox ${1:}_obj_ 'min_ 'max_)) ",
			"(setq ${1:}_min_ (vlax-safearray->list min_)) ",
			"(setq ${1:}_max_ (vlax-safearray->list max_)) ",
			""
		],
		"description": "Returns the nth element of a list"
	},
	
	"vl-string-left-trim": {
		"prefix": "lefttrim",
		"body": [
			"(vl-string-left-trim \"${1:str1}\" \"${2:str2}\")"
		],
		"description": "Removes the specified characters from the beginning of a string"
	},
	"vlax-ename:TA": {
		"prefix": "vlax-ename",
		"body": [
			"(setq ${1:}_obj_ (vlax-ename->vla-object ${1:}_ename_))",
		],
		"description": "Removes the specified characters from the beginning of a string"
	},
	"vla-get-insertionpoint:TA": {
		"prefix": "vlains",
		"body": [
			"(setq ${1:}_obj_ins_ (vlax-safearray->list (vlax-variant-value (vla-get-insertionpoint ${1:}_obj_))))"
		],
		"description": "Removes the specified characters from the beginning of a string"
	},
	"vla-get-startpoint:TA": {
	  "prefix": "getstartpt",
	  "body": [
	  "(setq ${1:}_obj_start_end_pt_ (list",
      "                                (setq ${1:}_obj_startpt_ (vlax-safearray->list",
      "                                                           (vlax-variant-value ( vla-get-startpoint ${1:}_obj_ ))",
      "                                                         )",
      "                                )",
      "                                (setq ${1:}_obj_endpt_ (vlax-safearray->list",
      "                                                          (vlax-variant-value ( vla-get-endpoint ${1:}_obj_ ))",
      "                                                       )",
      "                                )",
      "                              )",
      ")"
	  ],
	  "description": "set_xx_ename_start_end_pt_"
	},
	"vl-string-trim": {
		"prefix": "trim",
		"body": [
			"(vl-string-trim \"${1:str1}\" \"${2:str2}\")"
		],
		"description": "Removes the specified characters from the beginning and end of a string"
	},
	"vl-string-search": {
		"prefix": "search",
		"body": [
			"(vl-string-search \"${1:fun1}\" \"${2:fun2}\")"
		],
		"description": "Searches for the specified pattern in a string"
	},
	"dcl": {
		"prefix": "dcl",
		"body": [
			"(setq ${1:fname} \"${2:dclfile}.dcl\")",
			"\t(setq ${3:id} (load_dialog ${1:fname}))",
			"\t(if (not (new_dialog \"${4:hello}\" ${3:id}))",
			"\t(${5:exit})",
			")"
		],
		"description": "DCL expression"
	},
	"get entity color": {
		"prefix": "getcolor",
		"body": [
			"(setq color (cdr (assoc 62 ${1:entname})))",
			"(if (= color nil)",
			"\t(progn",
			"\t\t(setq layer (cdr (assoc 8 ${1:entname})))",
			"\t\t(setq layerinf (tblsearch \"layer\" layer))",
			"\t\t(setq color (cdr (assoc 62 layerinf)))",
			"\t)",
			")"
		],
		"description": "get entity color"
	},
	"get entity layer": {
		"prefix": "getlayer",
		"body": [
			"(setq layer (cdr (assoc 8 ${1:entname})))"
		],
		"description": "get entity layer"
	},
	"make filter blkname": {
		"prefix": "filterBlk",
		"body": [
		";fillter_${1:}_name_object_",
		"\t(setq ${1:}_ename_ nil)",
		"\t(while (= ${1:}_ename_ nil)",
		"\t\t;user_input_data",
		"\t\t\t(setq ${1:}_ename_ (car (entsel \"specify Object\")))",
		"\t\t;",
		"\t\t;fillter_object_type_",
		"\t\t\t(if ",
		"\t\t\t\t(and",
		"\t\t\t\t\t(if (/= ${1:}_ename_ nil) (progn (setq ${1:}_obj_ (vlax-ename->vla-object ${1:}_ename_)) ))",
		"\t\t\t\t\t\t(= (vla-get-objectname ${1:}_obj_) \"AcDbBlockReference\")",
		"\t\t\t\t\t\t(= (vla-get-hasattributes ${1:}_obj_) :vlax-true )",
		"\t\t\t\t\t\t(= (LM:effectivename ${1:}_obj_) \"000 - DAYNAMIC_DATA_FAMELINE_PRICE_LIST\" )",
		"\t\t\t\t\t)",
		"\t\t\t\t(progn",
		"\t\t\t\t\t(setq ${1:}_tag_list_ (LM:vl-getattributevalues ${1:}_obj_))",
		"\t\t\t\t)",
		"\t\t\t\t(setq ${1:}_ename_ nil)",
		"\t\t\t)",
		"\t\t\t(if",
		"\t\t\t\t(or",
		"\t\t\t\t\t(= ${1:}_ename_ nil)",
		"\t\t\t\t\t(/= (vla-get-objectname ${1:}_obj_) \"AcDbBlockReference\")",
		"\t\t\t\t\t(if (= (vla-get-objectname ${1:}_obj_) \"AcDbBlockReference\") (progn (/= (vla-get-hasattributes ${1:}_obj_) :vlax-true ) ))",
		"\t\t\t\t)",
		"\t\t\t\t(progn",
		"\t\t\t\t\t(alert \"Please selection attribute object\")",
		"\t\t\t\t)",
		"\t\t\t)",
		"\t\t;",
		"\t)",
		";"
		],
		"description": "make single filter block name"
	},
	"make selection_set filter blkname": {
		"prefix": "ssset",
		"body": [
      ";selection_set_for_fillter_blk_name",
      "\t(if  ;pre_select_ssget_or_post_select_ssget",
      "\t\t(=",
      "\t\t\t(setq ss_pre_filter_set_xx_ (ssget \"i\"",
      "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(list",
      "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(cons 0 \"INSERT\") ;type of object",
      "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t; (cons 8 \"000 - GRID\")   ;kind of layer",
      "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t; (cons 2 \"000-GRID_LINE_DYN\")       ;kind of nameblock",
      "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t; (cons 62 1)           ;kind of color call sign with color code index",
      "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)",
      "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)",
      "\t\t\t)",
      "\t\t\tnil",
      "\t\t)",
      "\t\t(progn", 
      "\t\t\t(setq ss_pre_filter_set_xx_ (ssget",
      "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(list",
      "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(cons 0 \"INSERT\") ;type of object",
      "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t; (cons 8 \"000 - GRID\")   ;kind of layer",
      "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t; (cons 2 \"000-GRID_LINE_DYN\")       ;kind of nameblock",
      "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t; (cons 62 1)           ;kind of color call sign with color code index",
      "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)",
      "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)",
      "\t\t\t)",
      "\t\t)",
      "\t\t(sslength ss_pre_filter_set_xx_)",
      "\t)",
      ";",
			";get_data_process_for_fillter_blk_name",
      "\t(if",
      "\t\t(and", 
      "\t\t\t(= (sslength ss_pre_filter_set_xx_) 1)",
      "\t\t\t(= (vla-get-objectname (vlax-ename->vla-object (ssname ss_pre_filter_set_xx_ 0))) \"AcDbBlockReference\")",
      "\t\t\t(= (LM:effectivename (vlax-ename->vla-object (ssname ss_pre_filter_set_xx_ 0)) ) \"LV_DATA_FROM_EXCEl\" )",
      "\t\t)",
      "\t\t(progn",
      "\t\t\t(setq LV_DATA_FROM_EXCEl_list_ (LM:vl-getattributevalues (vlax-ename->vla-object (ssname ss_pre_filter_set_xx_ 0))))",
      "\t\t)",
      "\t)",
      ";"
		],
		"description": "make single filter block name"
	},
	"vl-catch-all-apply + function lambda:TA": {
		"prefix": "ErrorDetect",
		"body": [
			";ErrorDetect_",
      "\t(setq ${1:}_ ;Detect the variable's result in case of a function error",
      "\t\t(vl-catch-all-apply ",
      "\t\t\t(function ",
      "\t\t\t\t(lambda () ",
      "\t\t\t\t\t(setq ${2:}_ (${3:getint} \"specify ${4:} \"))",
      "\t\t\t\t)",
      "\t\t\t)",
      "\t\t)",
      "\t)",
			"\t(cond ;condition_for_detect_error_",
			"\t\t(;case_1",
			"\t\t\t(and",
			"\t\t\t\t(= ${1:}_ nil)",
			"\t\t\t\t(= ${2:}_ nil)",
			"\t\t\t)",
			"\t\t\t(progn",
			"\t\t\t\t(setq detect_error_code_${1:}_ T)",
			"\t\t\t\t(princ \"case_1\")",
			"\t\t\t)",
			"\t\t)",
			"\t\t(;case_2",
			"\t\t\t(vl-catch-all-error-p ${1:}_)",
			"\t\t\t\t(progn",
			"\t\t\t\t\t(setq detect_error_code_${1:}_ ;Detect the variable's result in case of a function error",
			"\t\t\t\t\t\t(wcmatch",
			"\t\t\t\t\t\t\t(strcase",
			"\t\t\t\t\t\t\t\t(setq detect_error_name_${1:}_",
			"\t\t\t\t\t\t\t\t\t(vl-catch-all-error-message",
			"\t\t\t\t\t\t\t\t\t\t${1:}_",
			"\t\t\t\t\t\t\t\t\t)",
			"\t\t\t\t\t\t\t\t)",
			"\t\t\t\t\t\t\t)",
			"\t\t\t\t\t\t\t\"FUNCTION*,*ERROR*\"",
			"\t\t\t\t\t\t)",
			"\t\t\t\t\t)",
			"\t\t\t\t\t(princ \"case_2\")",
			"\t\t\t\t)",
			"\t\t)",
			"\t)",
			";",

			// "(if (= detect_error_${1:}_ T)",
			// "\t(progn",
			// "\t\t",
			// "\t)",
			// ")",
			"${4:}"
		],
		"description": "Detect the variable's result in case of a function error"
	},
	"sorting obejct + function lambda:TA": {
		"prefix": "Lsorting",
		"body": [
			";TA:stanndard_lambda_sorting",
      "\t(setq ${1:}_sorted_ (vl-sort ${1:}_  ;bigest open indent list",
      "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(function ",
     	"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(lambda (a b) ",
      "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(< (nth 0 (car a)) (nth 0 (car b)))",
      "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)",
      "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)",
      "\t\t\t\t\t\t\t\t\t\t\t\t) ;bigest close indent list",
      "\t)",
			";"
		],
		"description": "Detect the variable's result in case of a function error"
	},
	"getstring_and_keep_previous:TA": {
		"prefix": "Gstring",
		"body": [
			";TA:getstring_and_keep_previous",
			"\t(setq ${1:} (getstring (strcat \" \\nSpecify ${1:} <\" (if ${1:} ${1:} \"\") \">: \") ) )",
			";"
		],
		"description": "Detect the variable's result in case of a function error"
	},
	"new_blk_entlast:TA": {
		"prefix": "newentlast",
		"body": [
			";new_blk_entlast object",
			"\t(setq ${1:}_ename (entlast))",
			"\t(setq ${1:}_obj (vlax-ename->vla-object ${1:}_ename))",
			";"
		],
		"description": "Detect the variable's result in case of a function error"
	},
	":vlax-true": { //made by TA
		"prefix": "vlture",
		"body": [
			":vlax-true"
		],
		"description": "Detect the variable's result in case of a function error"
	},
	":vlax-flase": { //made by TA
		"prefix": "vlflase",
		"body": [
			":vlax-true"
		],
		"description": "Detect the variable's result in case of a function error"
	},
	"TA:time_record_": { //made by TA
		"prefix": "timerecord",
		"body": [
			"(setq st_time_ (TA:start_time_for_record_))",
			"\t${1:}",
			"(setq st_time_1 (TA:start_time_for_record_))",
			"(alert (strcat \"total use time \n\" (rtos (- (+ (* 3600 (atof (substr st_time_1 1 2))) (* 60 (atof (substr st_time_1 3 2))) (atof (substr st_time_1 6 2)) ) (+ (* 3600 (atof (substr st_time_ 1 2))) (* 60 (atof (substr st_time_ 3 2))) (atof (substr st_time_ 6 2)) ) ) 2 0 ) \" second\" ) )"
		],
		"description": "Detect the variable's result in case of a function error"
	},
	"Standard-Propertie_object:TA": { //made by TA
		"prefix": "STDprop",
		"body": [
				";get-propertie_data",
				"(setq ${1: }obj_color_ (vla-get-color ${1: }obj_))",
				"(setq ${1: }obj_layer_ (vla-get-layer ${1: }obj_))",
				"(setq ${1: }obj_linetype_ (vla-get-linetype ${1: }obj_))",
				"(setq ${1: }obj_linetypescale_ (vla-get-linetypescale ${1: }obj_))"    
		],
		"description": "Detect the variable's result in case of a function error"
	},
	"Keep_Value_&_Getstring_:TA": { //made by TA
		"prefix": "keepgetstring",
		"body": [
				"(setq ${1: } ;Get-string by keep previous value",
        "\t\t(if",
        "\t\t\t(or",
        "\t\t\t\t(/= (setq${1: }val (getstring (strcat \"\\nSpecify Pattern name <\" (if ${1: } ${1: } \"\") \">: \") ) ) \"\" )",
        "\t\t\t)",
        "\t\t\t\t(progn",
        "\t\t\t\t\t(setq ${1: } ${1: }val)",
        "\t\t\t\t\t(setq ${1: }keep_val_ ${1: }val)",
        "\t\t\t\t)",
        "\t\t\t(setq ${1: }val ${1: }keep_val_)",
        "\t\t)",
        ")"  
		],
		"description": "Detect the variable's result in case of a function error"
	}

	
}

 



	
  
  



